import java.util.*;
import com.silentmatt.dss.*;
import com.silentmatt.dss.directive.*;
import com.silentmatt.dss.term.*;
import com.silentmatt.dss.expression.*;

COMPILER CSS3

    public CSSDocument CSSDoc;

        boolean partOfHex(String value) {
            if (value.length() == 7) { return false; }
            if (value.length() + la.val.length() > 7) { return false; }
            List<String> hexes = Arrays.asList(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "a", "b", "c", "d", "e", "f" });
            for (int i = 0; i < la.val.length(); i++) {
                char c = la.val.charAt(i);
                if (!hexes.contains(String.valueOf(c))) {
                    return false;
                }
            }
            return true;
        }
        boolean isUnit() {
            if (la.kind != 1) { return false; }
            List<String> units = Arrays.asList(new String[] { "em", "ex", "px", "gd", "rem", "vw", "vh", "vm", "ch", "mm", "cm", "in", "pt", "pc", "deg", "grad", "rad", "turn", "ms", "s", "hz", "khz" });
            return units.contains(la.val);
        }

/*------------------------------------------------------------------------*
 *----- SCANNER DESCRIPTION ----------------------------------------------*
 *------------------------------------------------------------------------*/

CHARACTERS

    tab                = '\u0009'. /*  9 = tabulator */
    eol                = '\u000a'. /* 10 = line feed */
    cr                 = '\u000d'. /* 13 = carriage return */
    newLine            = cr + eol. /* Line separator character (U+2028) + Paragraph separator character (U+2029) */
    space              = ' '.

    letter             = 'A' .. 'Z' + 'a' .. 'z' + '_'.
    digit              = "0123456789".
    hexDigit           = digit + "ABCDEFabcdef".
    notDigit           = ANY - digit.

    char               = ANY - "'" - '\\' - newLine.
    verbatimStringChar = ANY - '"'.
    regularStringChar  = ANY - '"' - '\\' - newLine.
    notNewLine         = ANY - newLine .
    ws                 = " " + tab + '\u000b' + '\u000c'. /* Any character with Unicode class Zs */
    nonascii           = '\u0080' .. '\ud7ff' + '\ue000' .. '\ufffd' /* + '\u10000' .. '#x10ffff' */ .
    wc                 = tab + eol + '\u000c' + cr + ' '.
    escape_chars       = ' ' .. '\u007e' + '\u0080' .. '\ud7ff' + '\ue000' .. '\ufffd' /* + '\u10000' .. '\u10FFFF'*/ .
    dqStringChar       = ANY - '\"' - '\\' - '\u000d' - '\u000a'.
    sqStringChar       = ANY - '\'' - '\\' - '\u000d' - '\u000a'.
    zeroToThree        = "0123".
    octalDigit         = "01234567".
    not_rp             = ANY - ')'.

TOKENS

    ident = ['-'] (letter | nonascii | (('\\' hexDigit [ hexDigit hexDigit hexDigit hexDigit hexDigit ] [ wc ]) | ('\\' escape_chars))) { letter | digit | '-' | nonascii | (('\\' hexDigit [ hexDigit hexDigit hexDigit hexDigit hexDigit ] [ wc ]) | ('\\' escape_chars)) }.
    integer = digit {digit}.
    decimal = digit {digit} '.' {digit}.
    s = wc { wc }.
    stringLit =
      ("\"" { dqStringChar
           | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "\n"
                  | "u" { "u" } hexDigit hexDigit hexDigit hexDigit
                  | zeroToThree [ octalDigit ] [ octalDigit ]
                  | octalDigit [ octalDigit ]
                  )
           }
      "\"")
    |
      ("\'" { sqStringChar
           | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "\n"
                  | "u" { "u" } hexDigit hexDigit hexDigit hexDigit
                  | zeroToThree [ octalDigit ] [ octalDigit ]
                  | octalDigit [ octalDigit ]
                  )
           }
      "\'").

    url = "url(" ( ("\"" { dqStringChar
           | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "\n"
                  | "u" { "u" } hexDigit hexDigit hexDigit hexDigit
                  | zeroToThree [ octalDigit ] [ octalDigit ]
                  | octalDigit [ octalDigit ]
                  )
           }
      "\"")
    |
      ("\'" { sqStringChar
           | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" | "\n"
                  | "u" { "u" } hexDigit hexDigit hexDigit hexDigit
                  | zeroToThree [ octalDigit ] [ octalDigit ]
                  | octalDigit [ octalDigit ]
                  )
           }
      "\'")
    |
      { not_rp } ) ")".

PRAGMAS

COMMENTS FROM "/*" TO "*/"
COMMENTS FROM "//" TO '\n'

IGNORE eol + cr + tab + space

PRODUCTIONS

/*------------------------------------------------------------------------*
 *--------------------------- Declarations -------------------------------*
 *------------------------------------------------------------------------*/

CSS3 =                                  (. CSSDoc = new CSSDocument(); .)
    {"<!--" | "-->" | s}
    {
        ( ruleset<out RuleSet rset>     (. CSSDoc.addRuleSet(rset); .)
          |
          directive<out Directive dir>  (. CSSDoc.addDirective(dir); .)
        )
        {"<!--" | "-->" | s}
    }
.

QuotedString<out String qs> = stringLit (. qs = t.val; .) .

URI<out String url> = url (. url = t.val.substring(4, t.val.length() - 1); .) .

medium<out Medium m> =  (. m = Medium.all; .)
    (
        "all"           (. m = Medium.all; .)
        | "aural"       (. m = Medium.aural; .)
        | "braille"     (. m = Medium.braille; .)
        | "embossed"    (. m = Medium.embossed; .)
        | "handheld"    (. m = Medium.handheld; .)
        | "print"       (. m = Medium.print; .)
        | "projection"  (. m = Medium.projection; .)
        | "screen"      (. m = Medium.screen; .)
        | "tty"         (. m = Medium.tty; .)
        | "tv"          (. m = Medium.tv; .)
    )
.

identity<out String ident> =
    (
        ident
        | "n"
        | "url"
        | "all"
        | "aural"
        | "braille"
        | "embossed"
        | "handheld"
        | "print"
        | "projection"
        | "screen"
        | "tty"
        | "tv"
    )   (. ident = t.val; .)
.

mediaDirective<out MediaDirective mdir> =               (.
                                                            List<Medium> media = new ArrayList<Medium>();
                                                            List<Rule> rules = new ArrayList<Rule>();
                                                        .)
    "@media"
    medium<out Medium m>                                (.  media.add(m); .)
    '{'
        {
            ruleset<out RuleSet rset>                   (.  rules.add(rset); .)
            |
            classDirective<out ClassDirective cdir>     (.  rules.add(cdir); .)
            |
            defineDirective<out DefineDirective ddir>   (.  rules.add(ddir); .)
            |
            includeDirective<out IncludeDirective idir> (.  rules.add(idir); .)
        }
    '}'                                                 (.  mdir = new MediaDirective(media, rules); .)
.

parameter<out Declaration dec> =        (. dec = new Declaration(); .)
    identity<out String ident>          (. dec.setName(ident); .)
    [
        ':' expr<out Expression exp>    (. dec.setExpression(exp); .)
    ]
.

classDirective<out ClassDirective dir> =        (.  String ident;
                                                    List<Declaration> parameters = new ArrayList<Declaration>();
                                                    List<Declaration> declarations = new ArrayList<Declaration>();
                                                    Declaration param;
                                                .)
    "@class"
    identity<out ident>
    [
        '<'
            [   parameter<out param>            (.  parameters.add(param); .)
                {   ';'
                    parameter<out param>        (.  parameters.add(param); .)
                }
            ]
        '>'
    ]
    '{' { declaration<out Declaration dec> ';'  (.  declarations.add(dec); .) } '}'
                                                (.  dir = new ClassDirective(ident, parameters, declarations); .)
.

defineDirective<out DefineDirective dir> =      (.
                                                    List<Declaration> declarations = new ArrayList<Declaration>();
                                                    boolean global = false;
                                                .)
    "@define"
    [ "global"                                  (.  global = true; .) ]
    '{'
        { declaration<out Declaration dec> ';'  (.  declarations.add(dec); .) }
    '}'                                         (.  dir = new DefineDirective(declarations, global); .)
.

fontFaceDirective<out FontFaceDirective dir> =  (.  List<Declaration> declarations = new ArrayList<Declaration>(); .)
    "@font-face"
    '{' { declaration<out Declaration dec> ';'  (.  declarations.add(dec); .) } '}'
                                                (.  dir = new FontFaceDirective(declarations); .)
.

pageDirective<out PageDirective dir> =          (.  List<Declaration> declarations = new ArrayList<Declaration>();
                                                    SimpleSelector ss = null;
                                                .)
    "@page"
    [ pseudo<out String psd>                    (.  ss = new SimpleSelector();
                                                    ss.setPseudo(psd);
                                                .)
    ]
    '{' { declaration<out Declaration dec> ';'  (.  declarations.add(dec); .) } '}'
                                                (.  dir = new PageDirective(ss, declarations); .)
.

importDirective<out ImportDirective dir> =
                        (.  Medium m = Medium.all;
                            UrlTerm trm;
                        .)
    "@import"
    URI<out String url> (.  trm = new UrlTerm(url); .)
    [ medium<out m> ]
    ';'                 (.  dir = new ImportDirective(trm, m); .)
.

includeDirective<out IncludeDirective dir> =
    "@include"
    URI<out String url> (. dir = new IncludeDirective(new UrlTerm(url)); .)
    ';'
.

charsetDirective<out CharsetDirective dir> =
    "@charset"
    term<out Term trm>   (. dir = new CharsetDirective(trm); .)
    ';'
.

namespaceDirective<out NamespaceDirective dir> =            (.  String ident = null;
                                                                String url = null;
                                                            .)
    "@namespace"
    [ identity<out ident> ]
    ( URI<out url> | QuotedString<out url> ) ';'            (.  dir = new NamespaceDirective(ident, new UrlTerm(url)); .)
.

genericDirective<out GenericDirective dir> =
    '@' identity<out String ident>                      (.  dir = new GenericDirective();
                                                            dir.setName("@" + ident);
                                                            dir.setType(DirectiveType.Other);
                                                        .)
    [
        expr<out Expression exp>                        (.  dir.setExpression(exp); .)
        |
        medium<out Medium m>                            (.  dir.getMediums().add(m); .)
    ]
    (
        '{'
            {
                // XXX: Order between Declarations and Rules is not preserved.
                declaration<out Declaration dec> ';'    (.  dir.getDeclarations().add(dec); .)
                |
                ruleset<out RuleSet rset>               (.  dir.addRuleSet(rset); .)
                |
                directive<out Directive dr>             (.  dir.addDirective(dr); .)
            }
        '}'
        |
        ';'
    )
.

directive<out Directive dir> (.  dir = null; .) =
    mediaDirective<out dir>
    |
    classDirective<out dir>
    |
    defineDirective<out dir>
    |
    fontFaceDirective<out dir>
    |
    // TODO: Look up where @import can be
    importDirective<out dir>
    |
    includeDirective<out dir>
    |
    // TODO: Look up where @charset can be
    charsetDirective<out dir>
    |
    pageDirective<out dir>
    |
    // TODO: Look up where @charset can be
    namespaceDirective<out dir>
    |
    genericDirective<out dir>
.

ruleset<out RuleSet rset> =             (.  rset = new RuleSet();
                                            Selector sel;
                                            Declaration dec;
                                            Directive dir;
                                        .)

    selector<out sel>                   (.  rset.getSelectors().add(sel); .)
    { ',' selector<out sel>             (.  rset.getSelectors().add(sel); .)
    }
    '{'
        {
            declaration<out dec> ';'    (.  rset.addDeclaration(dec); .)
            |
            classDirective<out dir>     (.  rset.addDirective(dir); .)
            |
            defineDirective<out dir>    (.  rset.addDirective(dir); .)
        }
    '}'
.

selector<out Selector sel> =    (. sel = new Selector();
                                    SimpleSelector ss;
                                    Combinator cb = null;
                                .)
    simpleselector<out ss>      (. sel.getSimpleSelectors().add(ss); .)
    { [ ('+'                    (. cb = Combinator.PrecededImmediatelyBy; .)
        | '>'                   (. cb = Combinator.ChildOf; .)
        | '~'                   (. cb = Combinator.PrecededBy; .)
        ) ]
        simpleselector<out ss>  (. if (cb != null) { ss.setCombinator(cb); }
                                    sel.getSimpleSelectors().add(ss);
                                    cb = null;
                                .)
    }
.
simpleselector<out SimpleSelector ss> = (. ss = new SimpleSelector();
                                            SimpleSelector parent = ss;
                                            String ident;
                                        .)
    (identity<out ident>                (.  ss.setElementName(ident); .)
    | '*'                               (.  ss.setElementName("*"); .)
    | ('#' identity<out ident>          (.  ss.setID(ident); .)
        | '.' identity<out ident>       (.  ss.setClassName(ident); .)
        | attrib<out Attribute atb>     (.  ss.setAttribute(atb); .)
        | pseudo<out String psd>        (.  ss.setPseudo(psd); .)
        )
    )
    {                                   (.  SimpleSelector child = new SimpleSelector(); .)
        ('#' identity<out ident>        (.  child.setID(ident); .)
        | '.' identity<out ident>       (.  child.setClassName(ident); .)
        | attrib<out Attribute atb>     (.  child.setAttribute(atb); .)
        | pseudo<out String psd>        (.  child.setPseudo(psd); .)
        )                               (.  parent.setChild(child);
                                            parent = child;
                                        .)
    }
.

attrib<out Attribute atb> =         (.  atb = new Attribute();
                                        String quote;
                                        String ident;
                                    .)
    '[' identity<out ident>         (.  atb.setOperand(ident); .)
    [
        ( '='                       (.  atb.setOperator(AttributeOperator.Equals); .)
        | "~="                      (.  atb.setOperator(AttributeOperator.InList); .)
        | "|="                      (.  atb.setOperator(AttributeOperator.Hyphenated); .)
        | "$="                      (.  atb.setOperator(AttributeOperator.EndsWith); .)
        | "^="                      (.  atb.setOperator(AttributeOperator.BeginsWith); .)
        | "*="                      (.  atb.setOperator(AttributeOperator.Contains); .)
        )
        ( identity<out ident>       (.  atb.setValue(ident); .)
        | QuotedString<out quote>   (.  atb.setValue(quote); .)
        )
    ] ']'
.

pseudo<out String pseudo> =         (.  StringBuilder sb = new StringBuilder(); .)
    ':' [ ':' ]
    identity<out String ident>      (.  sb.append(ident); .)
    [ '('
        expr<out Expression exp>    (.  sb.append("(").append(exp).append(")"); .)
    ')'
    ]                               (.  pseudo = sb.toString(); .)
.
declaration<out Declaration dec> =  (. dec = new Declaration(); .)
    identity<out String ident>      (. dec.setName(ident); .)
    ':' expr<out Expression exp>    (. dec.setExpression(exp); .)
    [ "!important"                  (. dec.setImportant(true); .) ]
.
expr<out Expression exp> =  (.  exp = new Expression();
                                Character sep = null;
                                Term trm;
                            .)
    term<out trm>           (.  exp.getTerms().add(trm); .)
    { [ ('/'                (.  sep = '/'; .)
        | ','               (.  sep = ','; .)
        ) ]
        term<out trm>       (.
                                if (sep != null) { trm.setSeperator(sep); }
                                exp.getTerms().add(trm);
                                sep = null;
                            .)
    }
.

lengthExpression<out CalcExpression expr> =
    additiveExpression<out expr>
.

addop<out Operation op> (. op = null; .) = '+' (. op = Operation.Add; .) | '-' (. op = Operation.Subtract; .).
mulop<out Operation op> (. op = null; .) = '*' (. op = Operation.Multiply; .) | '/' (. op = Operation.Divide; .).

additiveExpression<out CalcExpression expr> = (. CalcExpression left, right; Operation op; .)
    multiplicativeExpression<out left> (. expr = left; .)
    {
        addop<out op> multiplicativeExpression<out right> (. expr = new BinaryExpression(op, expr, right); .)
    }
.

multiplicativeExpression<out CalcExpression expr> = (. CalcExpression left, right; Operation op; .)
    termExpression<out left> (. expr = left; .)
    {
        mulop<out op> termExpression<out right> (. expr = new BinaryExpression(op, expr, right); .)
    }
.

termExpression<out CalcExpression expr> (. expr = null; Term trm; CalcExpression exp; .) =
    '(' lengthExpression<out exp> ')' (. expr = exp; .)
    |
    term<out trm> (. expr = new TermExpression(trm); .)
.

calculation<out CalcExpression expr> =
"calc" "(" lengthExpression<out expr> ")"
.

term<out Term trm> =                        (.  String val = "";
                                                Expression exp;
                                                String ident;
                                                CalcExpression expression;
                                                trm = null;
                                            .)
    (
        QuotedString<out val>               (.  trm = new StringTerm(val); .)
        |
        URI<out val>                        (.  trm = new UrlTerm(val); .)
        |
        "U\\" identity<out ident>           (.  trm = new UnicodeTerm("U\\" + ident); .)
        |
        HexValue<out val>                   (.  trm = new HexTerm(val); .)
        |
        calculation<out expression>         (.  trm = new CalculationTerm(expression); .)
        |
        identity<out ident>                 (.  trm = new StringTerm(ident); .)
        { ':'                               (.  ((StringTerm) trm).setValue(trm.toString() + t.val); .)
            [ ':'                           (.  ((StringTerm) trm).setValue(trm.toString() + t.val); .)
            ]
            identity<out ident>             (.  ((StringTerm) trm).setValue(trm.toString() + ident); .)
            |
            '.'                             (.  ((StringTerm) trm).setValue(trm.toString() + t.val); .)
            identity<out ident>             (.  ((StringTerm) trm).setValue(trm.toString() + ident); .)
            |
            '='                             (.  ((StringTerm) trm).setValue(trm.toString() + t.val); .)
            (   identity<out ident>         (.  ((StringTerm) trm).setValue(trm.toString() + ident); .)
                |
                integer                     (.  ((StringTerm) trm).setValue(trm.toString() + t.val); .)
            )
        }
        [
            '(' expr<out exp>               (.  FunctionTerm func = new FunctionTerm();
                                                func.setName(trm.toString());
                                                func.setExpression(exp);
                                                trm = func;
                                            .)
            ')'
            |
            ('<'                            (.  ClassReferenceTerm cls = new ClassReferenceTerm(trm.toString());
                                                Declaration dec;
                                                trm = cls;
                                            .)
                [ declaration<out dec>      (.  cls.addArgument(dec); .)
                  { ';'
                    declaration<out dec>    (.  cls.addArgument(dec); .) }
                ]
            '>')
        ]
        |
        [   '-'                             (.  trm = new NumberTerm(0); ((NumberTerm) trm).setSign('-'); .)
            |
            '+'                             (.  trm = new NumberTerm(0); ((NumberTerm) trm).setSign('+'); .)
        ]
        ( integer | decimal )               (.  if (trm == null) trm = new NumberTerm(Double.parseDouble(t.val)); val = t.val; .)
        (
            // TODO: This gets lost because val isn't used to construct the NumberTerm
            IF(la.val.equalsIgnoreCase("n"))
            (
            /* func(4n+1) */
                "n"                         (.  val += t.val; .)
                [ ( "+"                     (.  val += '+'; .)
                    |
                    "-"                     (.  val += '-'; .)
                  )
                    integer                 (.  val += t.val; .)
                ]
            )                               (. trm = new StringTerm(val); val = ""; .)
            |                               // TODO: What if trm isn't a NumberTerm?
            "%"                             (.  ((NumberTerm) trm).setUnit(Unit.Percent); .)
            |
            [
                IF(isUnit())
                    identity<out ident>     (.  try {
                                                    // TODO: What if trm isn't a NumberTerm?
                                                    ((NumberTerm) trm).setUnit(Unit.parse(ident));
                                                } catch (Exception ex) {
                                                    errors.SemErr(t.line, t.col, "Unrecognized unit '" + ident + "'");
                                                }
                                            .)
            ]
        )                                   (.  if (trm instanceof NumberTerm) {
                                                    ((NumberTerm) trm).setValue(Double.parseDouble(val));
                                                }
                                                else if (trm instanceof StringTerm) {
                                                    StringTerm strTrm = (StringTerm) trm;
                                                    strTrm.setValue(strTrm.getValue() + val);
                                                }
                                            .)
    )
.

HexValue<out String val> =  (.  StringBuilder sb = new StringBuilder();
                                boolean found = false;
                            .)
    '#'                     (.  sb.append(t.val); .)
    (
        integer             (.  sb.append(t.val); .)
        |
        ident               (.  sb.append(t.val); found = true; .)
    )
    [   IF(!found && partOfHex(sb.toString()))
            ident           (.  sb.append(t.val); .)
    ]                       (.  val = sb.toString(); .)
.

END CSS3.